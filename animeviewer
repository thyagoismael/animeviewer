#!/bin/sh
#
# Autor: Thyago Ismael
# Animeviewer - utilitário para o site animesonline.vip
#


#####################################################################
#####################################################################
#####################################################################
#####################################################################
#
# Passos iniciais do programa
#
# Arquivo de variáveis

ARQ_CONFIGURACAO=$HOME/.animerc
ARQ_CONFIGURACAO_BACKUP=$HOME/.config/animeviewer/.animerc.skel

# Se não houver um arquivo de configuração na home,
# use o que backup. Se nenhum dos dois puder ser encontrado
# o programa termina com erro
if test -f $ARQ_CONFIGURACAO
then
    . $ARQ_CONFIGURACAO
elif test -f $ARQ_CONFIGURACAO_BACKUP
then
    . $ARQ_CONFIGURACAO_BACKUP
else
    notify-send -i error "Erro na abertura" "Não foi possível encontrar o arquivo $ARQ_CONFIGURACAO" > /dev/stderr
    exit 1
fi


# Cria os arquivos que estão faltando, se houver

test -d "$DIR_CONFIG"       || mkdir -p "$DIR_CONFIG"
test -d "$DIR_DOWNLOADS"    || mkdir -p "$DIR_DOWNLOADS"
test -f "$ARQ_LISTAO"       || touch "$ARQ_LISTAO"
test -f "$ARQ_FAVORITOS"    || touch "$ARQ_FAVORITOS"
test -f "$ARQ_FILA_DOWNLOAD"|| touch "$ARQ_FILA_DOWNLOAD"

#####################################################################
#####################################################################
#####################################################################
#####################################################################

atualizarLinks()
{
    MAIOR_PAGINA=10 # número de páginas do site (em 17-09-2019 haviam 189)

    getLinks $MAIOR_PAGINA

    notify-send Atualizado "$(wc -l $ARQ_LINKS | awk '{print $1}') animes salvos em $ARQ_LINKS"
}
# Remove a sintaxe do html deixando apenas a url e o nome
removerHTML()
{
    echo "$1" | sed 's/^.*href="// ; s/" [^"]*"/\t/ ; s/".*// ; s/ /_/g ; s/_Online//' | tr '\t' ' '
}

# Preenche o arquivo ARQ_LINKS
getLinks()
{
    TEMP=$(mktemp)  # Arquivo temporário para guardar links 

    for pagina in $(seq $1)
    do
        LINK="https://animesonline.vip/animes/"
        test $pagina -eq 1 || LINK="${LINK}page/$pagina/"

        # Baixa o HTML, procura o nome e o link correspondente e salva num arq temporario
        removerHTML "$(curl -s $LINK | grep '^<a itemp')" >> $TEMP

        # Porcentagem de animes listados
        echo "$pagina de $1 páginas"
    done

    # Ordena o arquivo temporário
    # Inverte a coluna do link com a do nome
    # E deixa mais bonitinho no formato de colunas
    sort -u $TEMP | sed '/^$/ d' | awk '{t=$1; $1=$2; $2=t; print}' | column -t > $ARQ_LINKS

    rm $TEMP # Por último, remove o temporário
}

# Retorna a url da página do anime
selecionarAnime()
{
    # $1 é o o arquivo (lista ou favoritos)
    dmenu -i -l 10 -p 'Escolha o título: ' < $1
}

# Retorna a url do episódio
selecionarEpisodio()
{
    # $1 é a url do anime
    test -z "$1" && return # caso não seja informado o nome

    LISTA_EPISODIOS=$(removerHTML "$(curl -s $1 | grep '^<a href=".*Epis')") # deixa apenas o link e o nome, nessa ordem

    if test -z "$LISTA_EPISODIOS"
    then
        notify-send -i error Erro "Não foi possível abrir o link do anime"
        return
    fi

    echo "$LISTA_EPISODIOS" | 
    awk '{t=$1; $1=$2; $2=t; print}' | # troca as colunas de posição
    column -t | # deixa bonitinho
    dmenu -i -l 10 -p 'Escolha o episódio: ' | # abre o menu
    awk '{print $2}' # deixa apenas o link
}

menuAcaoEpisodio()
{
    # $1 é o arquivo de links ou de favoritos
    NOME_E_URL=$(selecionarAnime "$1") 

    URL_ANIME=$(echo $NOME_E_URL | awk '{print $2}')

    test -z "$URL_ANIME" && return

    # E usa pra pegar a url do episodio
    URL_EPISODIO="$(selecionarEpisodio $URL_ANIME)"
    test -z "$URL_EPISODIO" && return 


    # As opções tem que ser *exatamente* iguais aos cases
    #OPCOES="Reproduzir\nBaixar\nAdicionar/Remover Favorito"
    OPCOES="Reproduzir
Baixar
Adicionar/Remover Favorito"

    # Cheque duas vezes se os as opções coincidem com os cases
    ACAO=$(printf "$OPCOES" | dmenu -i -p 'O que fazer? ')
    case $ACAO in
        "Reproduzir")
            "$PLAYER" "$URL_EPISODIO"
            ;;
        "Baixar")
            notify-send -i emblem-downloads "Adicionado à fila"
            echo $URL_EPISODIO >> $ARQ_FILA_DOWNLOAD
            ;;
        "Adicionar/Remover Favorito")
            # Se esta na lista
            if grep "$NOME_E_URL" "$ARQ_FAVORITOS"
            then
                # remove
                notify-send -i edittrash "Removido dos favoritos"
                grep -v "$NOME_E_URL" "$ARQ_FAVORITOS" | tee "$ARQ_FAVORITOS"
            # senão
            else 
                # adiciona
                notify-send -i emblem-favorite "Adicionado aos favoritos"
                echo "$NOME_E_URL" >> $ARQ_FAVORITOS
            fi
            ;;
        *)
            ;;
    esac
}

menuInicial()
{
    printf "Listão\nFavoritos\nDownloads\nAtualizar\nSair" | dmenu -i -p "Animeviewer "
}

#####################################################################
#####################################################################
#####################################################################
#####################################################################

while true
do
    ESCOLHA="$(menuInicial)"

    case $ESCOLHA in
        "Listão")
            menuAcaoEpisodio "$ARQ_LISTAO"
            ;;
        "Favoritos")
            menuAcaoEpisodio "$ARQ_FAVORITOS"
            ;;
        "Downloads")
            cd $DIR_DOWNLOADS
            $PLAYER "$(zenity --file-selection --title "Escolha um episódio")"
            cd -
            ;;
        "Atualizar")
            atualizarLinks
            ;;
        *)
            ;;
    esac
    test "$ESCOLHA" = "Sair" && break
done
